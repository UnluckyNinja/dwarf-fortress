basic_seed;
beginroutine();
dlopen;
dlsym;
drawborder(char const*, char, char const*);
dwarf_end_announcements();
dwarf_option_screen();
dwarf_remove_screen();
endroutine();
errorlog_prefix;
gamemode;
glAccum;
glAlphaFunc;
glBindTexture;
glBlendFunc;
glClear;
glColorPointer;
glDeleteTextures;
glDisable;
glDisableClientState;
glDrawArrays;
glEnable;
glEnableClientState;
glGenTextures;
glGetString;
glGetTexLevelParameteriv;
glLoadIdentity;
glMatrixMode;
glPixelStorei;
glTexCoordPointer;
glTexEnvi;
glTexImage2D;
glTexParameteri;
glTexSubImage2D;
gluOrtho2D;
glVertexPointer;
glViewport;
glXGetClientString;
glXGetProcAddressARB;
glXQueryVersion;
__gmon_start__;
gtk_dialog_get_type;
gtk_dialog_run;
gtk_events_pending;
gtk_init_check;
gtk_main_iteration;
gtk_message_dialog_new;
gtk_widget_destroy;
gtk_window_set_position;
gtk_window_set_title;
g_type_check_instance_cast;
gview;
IMG_Load;
init;
_Jv_RegisterClasses;
mainloop();
movie_version;
mt_buffer;
mt_cur_buffer;
mt_index;
mt_virtual_buffer;
process_object_lines(textlinesst&, ::std::string&, ::std::string&);
pthread_cancel;
SDL_ConvertSurface;
SDL_CreateRGBSurface;
SDL_CreateSemaphore;
SDL_CreateThread;
SDL_Delay;
SDL_DestroySemaphore;
SDL_DisplayFormat;
SDL_DisplayFormatAlpha;
SDL_EnableKeyRepeat;
SDL_EnableUNICODE;
SDL_FillRect;
SDL_Flip;
SDL_FreeSurface;
SDL_GetAppState;
SDL_GetError;
SDL_GetMouseState;
SDL_GetRGBA;
SDL_GetTicks;
SDL_GetVideoInfo;
SDL_GetVideoSurface;
SDL_GL_GetAttribute;
SDL_GL_SetAttribute;
SDL_GL_SwapBuffers;
SDL_Init;
SDL_InitSubSystem;
SDL_LockSurface;
SDL_MapRGB;
SDL_NumJoysticks;
SDL_PollEvent;
SDL_Quit;
SDL_RWFromFile;
SDL_SaveBMP_RW;
SDL_SemPost;
SDL_SemTryWait;
SDL_SemWait;
SDL_SetAlpha;
SDL_SetColorKey;
SDL_SetVideoMode;
SDL_ShowCursor;
SDL_ThreadID;
SDL_UnlockSurface;
SDL_UpperBlit;
SDL_WM_SetCaption;
SDL_WM_SetIcon;
standardscrolling(::std::set< long >&, int&, int, int, int, unsigned int);
texture;
texture_handlerst::clean();
TTF_CloseFont;
TTF_FontHeight;
TTF_Init;
TTF_OpenFont;
TTF_RenderUNICODE_Blended;
TTF_SizeUNICODE;
TTF_WasInit;
typeinfo for viewscreenst;
viewscreenst::help();
viewscreenst::key_conflict(long);
vtable for viewscreenst;
